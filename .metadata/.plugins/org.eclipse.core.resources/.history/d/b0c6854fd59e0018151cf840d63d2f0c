package com.demo.repository;

import com.google.common.collect.Lists;
import org.mybatis.generator.api.MyBatisGenerator;
import org.mybatis.generator.config.Configuration;
import org.mybatis.generator.config.xml.ConfigurationParser;
import org.mybatis.generator.internal.DefaultShellCallback;

import java.util.List;

/**
 *
 * 集成mybatis自动生成器
 * 此生成器支持两种模式的生成方式
 *
 * 1.数据库表名 字段名如果采用 下划线分割的标准模式，推荐使用开启tk.mapper 插件的生成方式，这种对开发更友好，还自动支持批量插入以及很多有用的方法
 * 可以自己体会
 *
 * 2.如果数据库以及 表名，字段名标准采用的是驼峰命名，则推荐关闭tk.mapper 插件，再生成代码，这种生成的代码和SAAS的代码生成器的相同
 * 功能稍微弱一些，但是满足大部分需求。
 *
 *
 *
 *
 */
public class MybatisGenerator {
    public static void main(String[] args) throws Exception {
        List<String> warnings = Lists.newArrayList();
        boolean overwrite = true;
        ConfigurationParser cp = new ConfigurationParser(warnings);
        Configuration config = cp.parseConfiguration(
        MybatisGenerator.class.getResourceAsStream("/mybatis-generator-config.xml"));
        DefaultShellCallback callback = new DefaultShellCallback(overwrite);
        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
        myBatisGenerator.generate(null);
    }
}
